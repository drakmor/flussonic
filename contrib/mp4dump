#!/usr/bin/env ERL_LIBS=apps escript

-include_lib("erlmedia/include/video_frame.hrl").
-mode(compile).
% sublime: syntax Erlang

main([Path]) ->
  {ok, F} = file:open(Path, [binary, read]),
  {ok, MP4} = mp4_reader:init({file,F}, []),
  put(dts, 0),
  dump(MP4, undefined).
  
dump(F, FrameId) ->
  try mp4_reader:read_frame(F, FrameId) of
    #video_frame{next_id = Next} = Frame ->
      dump_frame(Frame),
      dump(F, Next);
    eof ->
      ok
  catch
    Class:Error ->
      {ok, Size} = file:position(F, eof),
      {ok, Bin} = file:pread(F, FrameId, Size - FrameId),
      io:format("ERROR ~p:~p ~p~n~p~n", [Class,Error, erlang:get_stacktrace(), Bin])    
  end.

limit(Body, Limit) ->
  case Body of
    <<Data:Limit/binary, _/binary>> -> Data;
    _ -> Body
  end.

unpack_slices(<<Len:32,NAL:Len/binary, Body/binary>> = All) ->
  [{Len, h264:type(NAL)}|unpack_slices(Body)];

unpack_slices(<<>>) ->
  [].

dump_frame(#video_frame{content = Content, stream_id = StreamId, codec = Codec, flavor = Flavor, dts = DTS, pts = PTS, body = Body, sound = Sound}) ->
  Info = case Codec of
    _ when Flavor == config -> io_lib:format("~240p", [Body]);
    _ when Codec == h264 andalso (Flavor == keyframe orelse Flavor == frame) ->
      io_lib:format("~p ctime, ~240p bytes: ~240p", [round(PTS - DTS), size(Body), unpack_slices(Body)]);
    _ when Content == video -> io_lib:format("~p ctime, ~240p bytes: ~240p", [round(PTS - DTS), size(Body), limit(Body, 20)]);
    _ when Content == audio -> io_lib:format("~240p", [Sound]);
    _ when Content == metadata -> io_lib:format("~240p", [Body])
  end,
  Delta = round(DTS - get(dts)),
  % if Delta > 40 ->  
  io:format("~8.s ~8.B ~5.s ~9.s ~15.B ~5.B ~s~n", [Content, StreamId, Codec, Flavor, round(DTS), round(DTS - get(dts)), Info])
  % ;
  % true -> ok
  % end
  ,
  put(dts,DTS).

