#!/usr/bin/env ERL_LIBS=apps escript

% sublime: syntax Erlang

-mode(compile).

-include_lib("erlmedia/include/video_frame.hrl").

main(Paths) ->
  [thumbnails(Path) || Path <- Paths].

thumbnails(InPath) ->  
  io:format("~s~n", [InPath]),
  {ok, In} = file:open(InPath, [binary, read, raw, {read_ahead, 1024*1024}]),
  {ok, Reader} = mp4_reader:init({file, In}, []),
  OutPath = filename:dirname(InPath) ++ "/" ++ filename:basename(InPath, ".mp4") ++ "/",
  os:cmd("mkdir "++OutPath),
  
  Keyframes = load_keyframes(Reader),
  write_flv(OutPath, Reader, Keyframes),
  file:close(In),
  
  Cmd = "ffmpeg -i "++OutPath++"out.flv -f image2 "++OutPath++"img%02d.jpg",
  io:format("~s~n", [Cmd]),
  os:cmd(Cmd),
  file:delete(OutPath ++ "out.flv"),
  lists:foldl(fun(#video_frame{dts = DTS}, N) ->
    OldPath = lists:flatten(io_lib:format("~simg~2..0B.jpg", [OutPath, N])),
    NewPath = lists:flatten(io_lib:format("~s~p.jpg", [OutPath, DTS])),
    file:delete(NewPath),
    file:rename(OldPath, NewPath),
    os:cmd("mogrify -resize 80x "++NewPath),
    N+1
  end, 1, Keyframes),
  ok.


load_keyframes(Reader) ->
  <<RealStart:64>> = proplists:get_value('EVbd', mp4_reader:properties(Reader)),
  KF1 = [{round(RealStart + DTS), Id} || {DTS, Id} <- mp4_reader:keyframes(Reader)],
  [(mp4_reader:read_frame(Reader, Id))#video_frame{dts = DTS, pts = DTS} || {DTS, Id} <- KF1].

write_flv(OutPath, Reader, Keyframes) ->
  Path = OutPath++"out.flv",
  {ok, Out} = file:open(Path, [binary, write, raw]),
  file:write(Out, flv:header()),
  [file:write(Out, flv_video_frame:to_tag(C)) || C <- video_frame:config_frames(mp4_reader:media_info(Reader))],
  lists:zipwith(fun(Frame, N) ->
    file:write(Out, flv_video_frame:to_tag(Frame#video_frame{dts = N*40, pts = N*40}))
  end, Keyframes, lists:seq(0, length(Keyframes) - 1)),
  file:close(Out),
  Path.


  
dump(F, Offset, Out, DTS) ->
  case flv:read_frame({file, F}, Offset) of
    #video_frame{next_id = Next, flavor = config, content = video} = Frame ->
      file:write(Out, flv_video_frame:to_tag(Frame#video_frame{dts = DTS, pts = DTS})),
      % dump_frame(Frame),
      dump(F, Next, Out, DTS);
    #video_frame{next_id = Next, flavor = keyframe} = Frame ->
      file:write(Out, flv_video_frame:to_tag(Frame#video_frame{dts = DTS, pts = DTS})),
      % dump_frame(Frame),
      dump(F, Next, Out, DTS + 40);
    #video_frame{next_id = Next} ->
      dump(F, Next, Out, DTS);
    eof ->
      ok
  end.


dump_frame(#video_frame{content = Content, stream_id = StreamId, codec = Codec, flavor = Flavor, dts = DTS, body = Body, sound = Sound}) ->
  Info = case Codec of
    _ when Flavor == config -> io_lib:format("~240p", [Body]);
    _ when Content == video -> io_lib:format("~240p bytes", [size(Body)]);
    _ when Content == audio -> io_lib:format("~240p", [Sound]);
    _ when Content == metadata -> io_lib:format("~240p", [Body])
  end,
    
  io:format("~8.s ~8.B ~5.s ~9.s ~9.B ~s~n", [Content, StreamId, Codec, Flavor, round(DTS), Info]).

