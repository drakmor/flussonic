#!/usr/bin/env ERL_LIBS=apps:deps escript

% sublime: syntax Erlang
-mode(compile).

-include_lib("erlmedia/include/video_frame.hrl").

main([]) ->
  io:format("~s rtsp://host/path test/files/rtsp/CAMERA_NAME~n", [escript:script_name()]),
  init:stop();

main([URL1, Path]) ->
  Root = filename:join(filename:dirname(escript:script_name()), ".."),
  [code:add_pathz(Path_) || Path_ <- filelib:wildcard(Root ++ "/apps/*/ebin")],
  application:load(lager),
  application:set_env(lager,handlers,[{lager_console_backend,[info]}]),
  application:set_env(lager,error_logger_redirect,true),
  application:set_env(lager,crash_log,undefined),
  application:start(lager),


  {ok, {rtsp, AuthInfo, Host, Port, _, _}} = http_uri:parse(URL1, [{scheme_defaults, [{rtsp,554}]}]),
  URL = re:replace(URL1, "//(.*)@", "//", [{return,list}]),
  put(auth, fun(_,_) -> ["Authorization: Basic ", base64:encode(AuthInfo),"\r\n"] end),
  [User,Pass] = string:tokens(AuthInfo, ":"),
  put(user, User),
  put(pass, Pass),
  put(auth_type, basic),
  put(seq,1),
  put(session, ""),
  put(transport, ""),
  {ok, S} = gen_tcp:connect(Host, Port, [binary,{active,false},{packet,raw}]),

  call(S, "OPTIONS", URL),

  {ok, Headers1, SDP} = call(S, "DESCRIBE", URL),

  ContentBase = case proplists:get_value(<<"Content-Base">>, Headers1) of
    undefined -> filename:dirname(URL) ++ "/";
    CB -> binary_to_list(CB)
  end,
  {match, TrackPaths} = re:run(SDP, "control:(.*)\\r", [{capture,all_but_first,list},global]),
  Tracks = [case P of
    "rtsp://" ++ _ -> P;
    _ -> ContentBase ++ P
  end || [P] <- TrackPaths, P =/= "*"],

  put(i,0),
  [begin
    put(transport, io_lib:format("Transport: RTP/AVP/TCP;unicast;interleaved=~B-~B\r\n", [get(i)*2,get(i)*2+1])),
    put(i,get(i)+1),
    {ok, Headers, _} = call(S, "SETUP", Track),
    case get(session) of
      "" ->
        {_, Session1} = lists:keyfind(<<"Session">>, 1, Headers),
        [Session|_] = binary:split(Session1, <<";">>),
        put(session, ["Session: ", Session,"\r\n"]);
      _ -> ok
    end
  end || Track <- Tracks],

  put(transport,""),
  call(S, "PLAY", URL),

  loop(S, <<>>),
  ok.


loop(S, Bin) ->
  case rtsp:read(S, Bin) of
    {ok, {rtsp, Type, _, _, _}, Next} -> 
      io:format("~s~n",[Type]),
      loop(S, Next)
  end.


send(S, Method, URL) ->
  Seq = case get(seq) of undefined -> put(seq,0), []; Seq_ -> put(seq,Seq_+1), ["CSeq: ", integer_to_list(Seq_), "\r\n"] end,
  Auth = get(auth),
  Req = iolist_to_binary([Method, " ", URL, " RTSP/1.0\r\n",
    Seq,
    get(session),
    Auth(Method,URL),
    get(transport),
    "\r\n"
  ]),
  io:format("~s------------~n", [Req]),
  ok = gen_tcp:send(S, Req),
  ok.

read(S) ->
  {ok, {rtsp, response, {Code, Message}, Headers, Body}, <<>>} = rtsp:read(S, <<>>),
  io:format("RTSP/1.0 ~B ~s\r\n", [Code, Message]),
  [io:format("~s: ~s\r\n", [K,V]) || {K,V} <- Headers],
  io:format("\r\n"),
  case Body of undefined -> ok; _ -> io:format("~s", [Body]) end,
  io:format("------------~n", []),
  {ok, Code, Headers, Body}.

call(S, Method, URL) ->
  send(S, Method, URL),
  {ok, Code, Headers, Body} = read(S),
  AuthType = get(auth_type),
  case Code of
    200 -> {ok, Headers, Body};
    401 when AuthType == basic ->
      AuthHeader = proplists:get_value(<<"WWW-Authenticate">>, Headers),
      Username = get(user),
      Password = get(pass),
      put(auth, fun(Request, URL1) ->
        {match, [Realm]} = re:run(AuthHeader, "realm=\"([^\"]*)\"", [{capture,all_but_first,list}]),
        {match, [Nonce]} = re:run(AuthHeader, "nonce=\"([^\"]*)\"", [{capture,all_but_first,list}]),
        HA1 = to_hex(crypto:md5(iolist_to_binary([Username, ":", Realm, ":", Password]))),
        HA2 = to_hex(crypto:md5(io_lib:format("~s:~s", [Request, URL1]))),
        Response = to_hex(crypto:md5(iolist_to_binary([HA1, ":", Nonce, ":", HA2]))),

        DigestAuth = io_lib:format("Authorization: Digest username=\"~s\", realm=\"~s\", nonce=\"~s\", uri=\"~s\", response=\"~s\"\r\n",
          [Username, Realm, Nonce, URL1, Response]),
        DigestAuth
      end),

      put(auth_type, digest),
      call(S, Method, URL)
  end.




hex(C) when 0 =< C andalso C =< 9 -> C + $0;
hex(C) when 10 =< C andalso C =< 15 -> C - 10 + $a.
to_hex(Bin) -> << <<(hex(C div 16)), (hex(C rem 16))>> || <<C>> <= Bin >>.










