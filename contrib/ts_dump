#!/usr/bin/env ERL_LIBS=apps escript

-include_lib("erlmedia/include/video_frame.hrl").

% sublime: syntax Erlang


prepare(Path) ->
  Root = filename:join(filename:dirname(escript:script_name()), ".."),
  [code:add_pathz(Path_) || Path_ <- filelib:wildcard(Root ++ "/apps/*/ebin")],
  process_flag(trap_exit, true),
  {ok, File} = file:open(Path, [read,binary,{read_ahead,131072},raw]),
  {ok, Reader} = mpegts_reader:init([[{dump_psi,[pat,pmt]}]]),
  Modules = [mpegts_dumper, mpegts_reader, h264, aac],
  [code:load_file(Module) || Module <- Modules],
  {ok, File, Reader}.

dump_frame(#video_frame{codec = Codec, flavor = Flavor, dts = DTS, pts = PTS}) ->
  % case get(first_dts) of undefined -> put(first_dts, DTS - 40); _ -> ok end,
  put(first_dts, 0),
  io:format("~8.s ~8.s ~9.B ~5.B~n", [Codec, Flavor, round(DTS - get(first_dts)), round(PTS - DTS)]),
  ok.

loop(File, Reader, Writer) ->
  case file:read(File, 4096) of
    {ok, Bin} ->
      {ok, Reader1, Frames} = mpegts_reader:decode(Bin, Reader),
      Writer2 = lists:foldl(fun(Frame, Writer0) ->
        dump_frame(Frame),
        {ok, Writer1} = flv_writer:write_frame(Frame, Writer0),
        Writer1
      end, Writer, Frames),
      loop(File, Reader1, Writer2);
    eof ->
      ok
  end.

main(["http://"++_ = URL]) ->
  os:cmd("curl -o test.ts "++URL),
  main(["test.ts"]);

main([Path, Output]) ->
  {ok, File, Reader} = prepare(Path),
  {ok, Writer} = flv_writer:init_file(Output),
  loop(File, Reader, Writer),
  ok;

main([Path]) ->
  {ok, File, Reader} = prepare(Path),
  T1 = erlang:now(),
  % {ok, Number} = fprof:apply(mpegts_dumper, dump_frames, [File, Reader, 0]),
  {ok, Number} = mpegts_dumper:dump_frames(File, Reader, 0),
  T2 = erlang:now(),
  io:format("~p frames in ~p ms~n", [Number, timer:now_diff(T2, T1) div 1000]),
  % fprof:profile(),
  % fprof:analyse(),
  ok.


