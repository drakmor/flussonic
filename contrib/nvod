#!/usr/bin/env escript

-mode(compile).
% sublime: syntax Erlang

main([Path]) ->
  {ok, F} = file:open(Path, [read,binary,raw]),
  {ok, Socket} = gen_udp:open(0, [binary]),
  loop(F, [], erlang:now(), Socket).


loop(F, Acc, RealStart, Sock) ->
  case file:read(F, 188) of
    {ok, <<16#47, _TS/binary>> = Packet} ->
      PCR = extract_pcr(Packet),
      case dts(Packet) of
        undefined ->
          loop(F, [Packet|Acc], RealStart, Sock);
        DTS when length(Acc) == 0 ->
          case get(start_dts) of undefined -> put(start_dts, DTS); _ -> ok end, 
          loop(F, [Packet|Acc], RealStart, Sock);
        DTS ->
          RealDelta = timer:now_diff(erlang:now(), RealStart) div 1000,
          case get(start_dts) of undefined -> put(start_dts, DTS); _ -> ok end, 
          Delay = DTS - get(start_dts) - RealDelta,
          Sleep = if Delay < 0 -> 0; true -> Delay end,
          SmallSleep = erlang:trunc(Sleep / length(Acc)),
          % io:format("Sleep ~p ~p ~p~n", [Sleep, RealDelta, DTS]),
          timer:sleep(Sleep),
          io:format("~p ~p ~p~n", [DTS, Sleep, Delay]),
          % [begin gen_udp:send(Sock, "127.0.0.1", 5001, TS), timer:sleep(Sleep) end || TS <- lists:reverse(Acc)],
          [gen_udp:send(Sock, "127.0.0.1", 5001, TS) || TS <- lists:reverse(Acc)],
          loop(F, [], RealStart, Sock)
      end;
    eof ->
      ok
  end.

ts_payload(<<_TEI:1, _Start:1, _Priority:1, _Pid:13, _Scrambling:2, 0:1, 1:1, _Counter:4, Payload/binary>>)  -> 
  Payload;

ts_payload(<<_TEI:1, _Start:1, _Priority:1, _Pid:13, _Scrambling:2, 1:1, 1:1, _Counter:4, 
              AdaptationLength, _AdaptationField:AdaptationLength/binary, Payload/binary>>) -> 
  Payload;

ts_payload(<<_TEI:1, _Start:1, _Priority:1, _Pid:13, _Scrambling:2, 
              _Adaptation:1, 0:1, _Counter:4, _Payload/binary>>)  ->
  % ?D({"Empty payload on pid", _Pid}),
  <<>>.


dts(<<16#47, TS/binary>>) ->
  Payload = ts_payload(TS),
  extract_dts(Payload).

extract_dts(<<1:24, _:5/binary, Length, _:4, Pts1:3, 1:1, Pts2:15, 1:1, Pts3:15, 1:1, _/bitstring>>) when Length > 0 ->
  <<PTS1:33>> = <<Pts1:3, Pts2:15, Pts3:15>>,
  round(PTS1 / 90);

extract_dts(_) ->
  undefined.


extract_pcr(<<16#47, _:16, _:2, 1:1, _:5, Length, _:3, PCR:1, _OPCR:1, _:3, Pcr1:33, Pcr2:9, _/bitstring>> = TS) when Length > 0 andalso PCR == 1 ->
  round(Pcr1 / 90 + Pcr2 / 27000);

extract_pcr(_) ->
  undefined.
